/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type {IAppResolverContext} from './../../interfaces';
import type {core, connectionPluginCore} from 'nexus';
import type {FieldAuthorizeResolver} from 'nexus/dist/plugins/fieldAuthorizePlugin';

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  InputCreateChannel: {
    // input type
    channelGroupID: string; // String!
    description?: string | null; // String
    name: string; // String!
    type: string; // String!
  };
  InputCreateChannelGroup: {
    // input type
    description?: string | null; // String
    lockerRoomID: string; // String!
    name: string; // String!
  };
  InputCreateClub: {
    // input type
    Avatar?: NexusGenInputs['InputMedia'] | null; // InputMedia
    CoverPhoto?: NexusGenInputs['InputMedia'] | null; // InputMedia
    leagueID: string; // String!
    name: string; // String!
    sportIDs: string[]; // [String!]!
  };
  InputEditChannel: {
    // input type
    description?: string | null; // String
    name: string; // String!
    type: string; // String!
  };
  InputEditChannelGroup: {
    // input type
    description?: string | null; // String
    name: string; // String!
  };
  InputEditClub: {
    // input type
    Avatar?: NexusGenInputs['InputMedia'] | null; // InputMedia
    CoverPhoto?: NexusGenInputs['InputMedia'] | null; // InputMedia
    name: string; // String!
  };
  InputEditUser: {
    // input type
    Avatar?: NexusGenInputs['InputMedia'] | null; // InputMedia
  };
  InputInviteUserForManagerialRole: {
    // input type
    emailAddress?: string | null; // String
    role?: string | null; // String
  };
  InputMedia: {
    // input type
    objectID: string; // String!
    objectType: string; // String!
  };
  InputQueryMedia: {
    // input type
    isSport: boolean; // Boolean!
    objectID: string; // String!
    objectType: string; // String!
    type?: string | null; // String
  };
  InputUpdateLockerRoomUserRoles: {
    // input type
    role?: string | null; // String
    type: string; // String!
    userID: string; // String!
  };
  InputUser: {
    // input type
    Avatar?: NexusGenInputs['InputMedia'] | null; // InputMedia
    firstName?: string | null; // String
    lastName?: string | null; // String
    username?: string | null; // String
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  JSON: any;
}

export interface NexusGenObjects {
  Channel: {
    // root type
    channelGroupID: string; // String!
    createdAt?: number | null; // Float
    description?: string | null; // String
    id?: string | null; // ID
    isDeleted?: boolean | null; // Boolean
    livestreamID?: string | null; // String
    lockerRoomID: string; // String!
    name: string; // String!
    slug: string; // String!
    type: string; // String!
    updatedAt?: number | null; // Float
  };
  ChannelAndChannelGroup: {};
  ChannelGroup: {
    // root type
    createdAt?: number | null; // Float
    description?: string | null; // String
    group: string; // String!
    id?: string | null; // ID
    isDeleted?: boolean | null; // Boolean
    lockerRoomID: string; // String!
    name: string; // String!
    slug: string; // String!
    updatedAt?: number | null; // Float
    withLivestream?: boolean | null; // Boolean
  };
  ChannelGroups: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['ChannelGroup'][] | null; // [ChannelGroup!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  Channels: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['Channel'][] | null; // [Channel!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  Club: {
    // root type
    Avatar?: NexusGenRootTypes['Media'] | null; // Media
    CoverPhoto?: NexusGenRootTypes['Media'] | null; // Media
    createdAt?: number | null; // Float
    id?: string | null; // ID
    isFeatured?: boolean | null; // Boolean
    leagueID?: string | null; // String
    name: string; // String!
    slug: string; // String!
    sportIDs: string[]; // [String!]!
    updatedAt?: number | null; // Float
  };
  Clubs: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['Club'][] | null; // [Club!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  FanGroup: {
    // root type
    Avatar?: NexusGenRootTypes['Media'] | null; // Media
    CoverPhoto?: NexusGenRootTypes['Media'] | null; // Media
    createdAt?: number | null; // Float
    id?: string | null; // ID
    isDeleted?: boolean | null; // Boolean
    name: string; // String!
    slug: string; // String!
    sportIDs: string[]; // [String!]!
    updatedAt?: number | null; // Float
  };
  FanGroups: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['FanGroup'][] | null; // [FanGroup!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  Game: {
    // root type
    competition?: string | null; // String
    coverImage?: string | null; // String
    date: number; // Float!
    gameID: number; // Int!
    headline?: string | null; // String
    highPoints?: number | null; // Int
    isReminded?: boolean | null; // Boolean
    leagueCode?: string | null; // String
    links?: Array<NexusGenRootTypes['Link'] | null> | null; // [Link]
    location?: string | null; // String
    points: number; // Int!
    pointsLevel?: string | null; // String
    sport: string; // String!
    team1City?: string | null; // String
    team1Color?: string | null; // String
    team1DisplayName?: string | null; // String
    team1ID?: number | null; // Int
    team1Name?: string | null; // String
    team1Nickname?: string | null; // String
    team1Ranking?: number | null; // Int
    team1Score?: number | null; // Int
    team2City?: string | null; // String
    team2Color?: string | null; // String
    team2DisplayName?: string | null; // String
    team2ID?: number | null; // Int
    team2Name?: string | null; // String
    team2Nickname?: string | null; // String
    team2Ranking?: number | null; // Int
    team2Score?: number | null; // Int
    timeLeft?: string | null; // String
  };
  GameByLeague: {
    // root type
    concacaf?: NexusGenRootTypes['Games'] | null; // Games
    efl?: NexusGenRootTypes['Games'] | null; // Games
    epl?: NexusGenRootTypes['Games'] | null; // Games
    mlb?: NexusGenRootTypes['Games'] | null; // Games
    mls?: NexusGenRootTypes['Games'] | null; // Games
    nba?: NexusGenRootTypes['Games'] | null; // Games
    ncaa?: NexusGenRootTypes['Games'] | null; // Games
    nhl?: NexusGenRootTypes['Games'] | null; // Games
    uefa?: NexusGenRootTypes['Games'] | null; // Games
    wnba?: NexusGenRootTypes['Games'] | null; // Games
  };
  GamePartner: {
    // root type
    Icon?: NexusGenRootTypes['Media'] | null; // Media
    Logo?: NexusGenRootTypes['Media'] | null; // Media
    id?: string | null; // ID
    isHidden?: boolean | null; // Boolean
    name: string; // String!
    slug: string; // String!
  };
  GamePartners: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['GamePartner'][] | null; // [GamePartner!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  GameReminder: {
    // root type
    createdAt?: number | null; // Float
    emailBatchID?: string | null; // String
    gameID: string; // String!
    reminderSent?: boolean | null; // Boolean
    scheduledTime?: number | null; // Float
    uid: string; // String!
    updatedAt?: number | null; // Float
    userID: string; // String!
  };
  Games: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['Game'][] | null; // [Game!]
    next?: string | null; // String
    total?: number | null; // Int
  };
  InHouse: {
    // root type
    Avatar?: NexusGenRootTypes['Media'] | null; // Media
    CoverPhoto?: NexusGenRootTypes['Media'] | null; // Media
    createdAt?: number | null; // Float
    id?: string | null; // ID
    name: string; // String!
    slug: string; // String!
    sportIDs: string[]; // [String!]!
    updatedAt?: number | null; // Float
  };
  InHouses: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['InHouse'][] | null; // [InHouse!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  InviteLinks: {
    // root type
    actualLink: string; // String!
    inviteLink: string; // String!
  };
  League: {
    // root type
    Avatar?: NexusGenRootTypes['Media'] | null; // Media
    CoverPhoto?: NexusGenRootTypes['Media'] | null; // Media
    boost?: number | null; // Float
    createdAt?: number | null; // Float
    id?: string | null; // ID
    name: string; // String!
    slug: string; // String!
    sportIDs: string[]; // [String!]!
    updatedAt?: number | null; // Float
  };
  Leagues: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['League'][] | null; // [League!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  Link: {
    // root type
    avatarUrl?: string | null; // String
    iconUrl?: string | null; // String
    logoUrl?: string | null; // String
    source?: string | null; // String
    type?: string | null; // String
    url?: string | null; // String
  };
  Livestream: {
    // root type
    createdAt?: number | null; // Float
    id?: string | null; // ID
    isLive?: boolean | null; // Boolean
    link: string; // String!
    source: string; // String!
    startDate?: string | null; // String
    timezone?: string | null; // String
    title: string; // String!
    updatedAt?: number | null; // Float
  };
  LivestreamSource: {
    // root type
    id?: string | null; // ID
    name: string; // String!
  };
  LockerRoom: {
    // root type
    createdAt?: number | null; // Float
    group: string; // String!
    id?: string | null; // ID
    name: string; // String!
    slug: string; // String!
    updatedAt?: number | null; // Float
  };
  LockerRooms: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['LockerRoom'][] | null; // [LockerRoom!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  LockerRoomsByLeague: {
    // root type
    leagueID: string; // String!
    leagueName: string; // String!
  };
  Me: {
    // root type
    Avatar?: NexusGenRootTypes['Media'] | null; // Media
    createdAt?: number | null; // Float
    emailAddress: string; // String!
    firstName?: string | null; // String
    id?: string | null; // ID
    lastName?: string | null; // String
    slug: string; // String!
    uid: string; // String!
    updatedAt?: number | null; // Float
    username: string; // String!
    zipCode?: string | null; // String
  };
  Media: {
    // root type
    isSport?: boolean | null; // Boolean
    objectID: string; // String!
    objectType: string; // String!
  };
  MediaMessage: {
    // root type
    objectID: string; // String!
    objectType: string; // String!
  };
  Message: {
    // root type
    Media?: NexusGenRootTypes['MediaMessage'][] | null; // [MediaMessage!]
    channelSlug: string; // String!
    chatID: string; // String!
    createdAt?: number | null; // Float
    id?: string | null; // ID
    isDeletedEveryone?: boolean | null; // Boolean
    isDeletedSelf?: boolean | null; // Boolean
    isEdited?: boolean | null; // Boolean
    repliedToChatID?: string | null; // String
    text?: string | null; // String
    updatedAt?: number | null; // Float
    userID: string; // String!
  };
  Messages: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['Message'][] | null; // [Message!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  MessagesNextAsString: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['Message'][] | null; // [Message!]
    next?: string | null; // String
    total?: number | null; // Int
  };
  Mutation: {};
  MutationResult: {
    // root type
    objectID?: string | null; // String
    objectType?: string | null; // String
    success: boolean; // Boolean!
    timestamp?: number | null; // Float
  };
  MutationResultWithInviteUrl: {
    // root type
    inviteUrl: string; // String!
    objectID?: string | null; // String
    objectType?: string | null; // String
    success: boolean; // Boolean!
    timestamp?: number | null; // Float
  };
  Notification: {
    // root type
    actorUid: string; // String!
    actorUserID: string; // String!
    channelSlug: string; // String!
    chatID: string; // String!
    createdAt?: number | null; // Float
    id?: string | null; // ID
    isRead?: boolean | null; // Boolean
    isSeen?: boolean | null; // Boolean
    messageID: string; // String!
    targetUid: string; // String!
    targetUserID: string; // String!
    type: string; // String!
  };
  NotificationWithMessages: {
    // root type
    Messages: NexusGenRootTypes['Message'][]; // [Message!]!
    Notification: NexusGenRootTypes['Notification']; // Notification!
  };
  Notifications: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['Notification'][] | null; // [Notification!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  PhotoURL: {
    // root type
    photoURL?: string | null; // String
    type: string; // String!
  };
  Query: {};
  ReadMessage: {
    // root type
    channelSlug: string; // String!
    unreadMessagesCount?: number | null; // Float
  };
  Sport: {
    // root type
    Avatar: NexusGenRootTypes['Media']; // Media!
    CoverPhoto: NexusGenRootTypes['Media']; // Media!
    Icon?: NexusGenRootTypes['Media'] | null; // Media
    createdAt?: number | null; // Float
    id?: string | null; // ID
    name: string; // String!
    slug: string; // String!
    status?: string | null; // String
    updatedAt?: number | null; // Float
  };
  Sports: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['Sport'][] | null; // [Sport!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  User: {
    // root type
    Avatar?: NexusGenRootTypes['Media'] | null; // Media
    createdAt?: number | null; // Float
    emailAddress: string; // String!
    firstName?: string | null; // String
    id?: string | null; // ID
    lastName?: string | null; // String
    online?: boolean | null; // Boolean
    slug: string; // String!
    uid: string; // String!
    updatedAt?: number | null; // Float
    username: string; // String!
  };
  UserInvite: {
    // root type
    expiration?: number | null; // Float
    group: string; // String!
    id?: string | null; // ID
    time?: number | null; // Float
    type: string; // String!
    url?: string | null; // String
    userID: string; // String!
  };
  UserInviteData: {
    // root type
    emailAddress?: string | null; // String
    group?: string | null; // String
    lockerRoomID?: string | null; // String
    lockerRoomSlug?: string | null; // String
    role?: string | null; // String
  };
  UserRole: {
    // root type
    createdAt?: number | null; // Float
    group: string; // String!
    groupID: string; // String!
    groupType: string; // String!
    id?: string | null; // ID
    isPrimaryOwner?: boolean | null; // Boolean
    lockerRoomID: string; // String!
    role: string; // String!
    status: string; // String!
    uid: string; // String!
    updatedAt?: number | null; // Float
    userID: string; // String!
  };
  UserRoleType: {
    // root type
    id?: string | null; // ID
    name: string; // String!
  };
  UserRoles: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['UserRole'][] | null; // [UserRole!]
    next?: number | null; // Int
    total?: number | null; // Int
  };
  UserRolesInLockerRoom: {
    // root type
    Managers: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
    Owners: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
    Supporters: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
  };
  UserRolesInPrivateChannel: {
    // root type
    Joiners: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
    Owners: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
  };
  Users: {
    // root type
    count?: number | null; // Int
    items?: NexusGenRootTypes['User'][] | null; // [User!]
    next?: string | null; // String
    total?: number | null; // Int
  };
  Utilities: {
    // root type
    Utilities?: NexusGenScalars['JSON'] | null; // JSON
  };
  ZipCode: {
    // root type
    city: string; // String!
    country: string; // String!
    latitude: number; // Float!
    longitude: number; // Float!
    state: string; // String!
    zip: string; // String!
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  Channel: {
    // field return type
    Livestream: NexusGenRootTypes['Livestream'] | null; // Livestream
    Roles: NexusGenRootTypes['UserRolesInPrivateChannel'] | null; // UserRolesInPrivateChannel
    channelGroupID: string; // String!
    createdAt: number | null; // Float
    description: string | null; // String
    id: string | null; // ID
    isDeleted: boolean | null; // Boolean
    livestreamID: string | null; // String
    lockerRoomID: string; // String!
    name: string; // String!
    slug: string; // String!
    type: string; // String!
    unreadMessagesCount: number | null; // Float
    updatedAt: number | null; // Float
  };
  ChannelAndChannelGroup: {
    // field return type
    ChannelGroups: Array<NexusGenRootTypes['ChannelGroup'] | null> | null; // [ChannelGroup]
    Channels: Array<NexusGenRootTypes['Channel'] | null> | null; // [Channel]
  };
  ChannelGroup: {
    // field return type
    Channels: Array<NexusGenRootTypes['Channel'] | null> | null; // [Channel]
    createdAt: number | null; // Float
    description: string | null; // String
    group: string; // String!
    id: string | null; // ID
    isDeleted: boolean | null; // Boolean
    lockerRoomID: string; // String!
    name: string; // String!
    slug: string; // String!
    updatedAt: number | null; // Float
    withLivestream: boolean | null; // Boolean
  };
  ChannelGroups: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['ChannelGroup'][] | null; // [ChannelGroup!]
    next: number | null; // Int
    total: number | null; // Int
  };
  Channels: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['Channel'][] | null; // [Channel!]
    next: number | null; // Int
    total: number | null; // Int
  };
  Club: {
    // field return type
    Avatar: NexusGenRootTypes['Media'] | null; // Media
    CoverPhoto: NexusGenRootTypes['Media'] | null; // Media
    createdAt: number | null; // Float
    defaultChannelSlug: string | null; // String
    id: string | null; // ID
    isFeatured: boolean | null; // Boolean
    leagueID: string | null; // String
    leagueName: string | null; // String
    name: string; // String!
    slug: string; // String!
    sportIDs: string[]; // [String!]!
    supporterCount: number | null; // Int
    updatedAt: number | null; // Float
  };
  Clubs: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['Club'][] | null; // [Club!]
    next: number | null; // Int
    total: number | null; // Int
  };
  FanGroup: {
    // field return type
    Avatar: NexusGenRootTypes['Media'] | null; // Media
    CoverPhoto: NexusGenRootTypes['Media'] | null; // Media
    createdAt: number | null; // Float
    id: string | null; // ID
    isDeleted: boolean | null; // Boolean
    name: string; // String!
    slug: string; // String!
    sportIDs: string[]; // [String!]!
    updatedAt: number | null; // Float
  };
  FanGroups: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['FanGroup'][] | null; // [FanGroup!]
    next: number | null; // Int
    total: number | null; // Int
  };
  Game: {
    // field return type
    competition: string | null; // String
    coverImage: string | null; // String
    date: number; // Float!
    gameID: number; // Int!
    group: string; // String!
    headline: string | null; // String
    highPoints: number | null; // Int
    isLive: boolean; // Boolean!
    isReminded: boolean | null; // Boolean
    leagueCode: string | null; // String
    links: Array<NexusGenRootTypes['Link'] | null> | null; // [Link]
    location: string | null; // String
    points: number; // Int!
    pointsLevel: string | null; // String
    sport: string; // String!
    team1City: string | null; // String
    team1Color: string | null; // String
    team1DisplayName: string | null; // String
    team1ID: number | null; // Int
    team1Name: string | null; // String
    team1Nickname: string | null; // String
    team1Ranking: number | null; // Int
    team1Score: number | null; // Int
    team2City: string | null; // String
    team2Color: string | null; // String
    team2DisplayName: string | null; // String
    team2ID: number | null; // Int
    team2Name: string | null; // String
    team2Nickname: string | null; // String
    team2Ranking: number | null; // Int
    team2Score: number | null; // Int
    timeLeft: string | null; // String
  };
  GameByLeague: {
    // field return type
    concacaf: NexusGenRootTypes['Games'] | null; // Games
    efl: NexusGenRootTypes['Games'] | null; // Games
    epl: NexusGenRootTypes['Games'] | null; // Games
    mlb: NexusGenRootTypes['Games'] | null; // Games
    mls: NexusGenRootTypes['Games'] | null; // Games
    nba: NexusGenRootTypes['Games'] | null; // Games
    ncaa: NexusGenRootTypes['Games'] | null; // Games
    nhl: NexusGenRootTypes['Games'] | null; // Games
    uefa: NexusGenRootTypes['Games'] | null; // Games
    wnba: NexusGenRootTypes['Games'] | null; // Games
  };
  GamePartner: {
    // field return type
    Icon: NexusGenRootTypes['Media'] | null; // Media
    Logo: NexusGenRootTypes['Media'] | null; // Media
    id: string | null; // ID
    isHidden: boolean | null; // Boolean
    name: string; // String!
    slug: string; // String!
  };
  GamePartners: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['GamePartner'][] | null; // [GamePartner!]
    next: number | null; // Int
    total: number | null; // Int
  };
  GameReminder: {
    // field return type
    createdAt: number | null; // Float
    emailBatchID: string | null; // String
    gameID: string; // String!
    reminderSent: boolean | null; // Boolean
    scheduledTime: number | null; // Float
    uid: string; // String!
    updatedAt: number | null; // Float
    userID: string; // String!
  };
  Games: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['Game'][] | null; // [Game!]
    next: string | null; // String
    total: number | null; // Int
  };
  InHouse: {
    // field return type
    Avatar: NexusGenRootTypes['Media'] | null; // Media
    CoverPhoto: NexusGenRootTypes['Media'] | null; // Media
    createdAt: number | null; // Float
    id: string | null; // ID
    name: string; // String!
    slug: string; // String!
    sportIDs: string[]; // [String!]!
    updatedAt: number | null; // Float
  };
  InHouses: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['InHouse'][] | null; // [InHouse!]
    next: number | null; // Int
    total: number | null; // Int
  };
  InviteLinks: {
    // field return type
    actualLink: string; // String!
    inviteLink: string; // String!
  };
  League: {
    // field return type
    Avatar: NexusGenRootTypes['Media'] | null; // Media
    CoverPhoto: NexusGenRootTypes['Media'] | null; // Media
    boost: number | null; // Float
    createdAt: number | null; // Float
    id: string | null; // ID
    name: string; // String!
    slug: string; // String!
    sportIDs: string[]; // [String!]!
    updatedAt: number | null; // Float
  };
  Leagues: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['League'][] | null; // [League!]
    next: number | null; // Int
    total: number | null; // Int
  };
  Link: {
    // field return type
    avatarUrl: string | null; // String
    iconUrl: string | null; // String
    logoUrl: string | null; // String
    source: string | null; // String
    type: string | null; // String
    url: string | null; // String
  };
  Livestream: {
    // field return type
    LivestreamSource: NexusGenRootTypes['LivestreamSource'] | null; // LivestreamSource
    createdAt: number | null; // Float
    id: string | null; // ID
    isLive: boolean | null; // Boolean
    link: string; // String!
    source: string; // String!
    startDate: string | null; // String
    timezone: string | null; // String
    title: string; // String!
    updatedAt: number | null; // Float
  };
  LivestreamSource: {
    // field return type
    id: string | null; // ID
    name: string; // String!
  };
  LockerRoom: {
    // field return type
    ChannelGroups: Array<NexusGenRootTypes['ChannelGroup'] | null> | null; // [ChannelGroup]
    Club: NexusGenRootTypes['Club'] | null; // Club
    FanGroup: NexusGenRootTypes['FanGroup'] | null; // FanGroup
    Game: NexusGenRootTypes['Game'] | null; // Game
    InHouse: NexusGenRootTypes['InHouse'] | null; // InHouse
    League: NexusGenRootTypes['League'] | null; // League
    MyRole: NexusGenRootTypes['UserRole'] | null; // UserRole
    Roles: NexusGenRootTypes['UserRolesInLockerRoom'] | null; // UserRolesInLockerRoom
    Sports: Array<NexusGenRootTypes['Sport'] | null> | null; // [Sport]
    channelCount: number | null; // Int
    createdAt: number | null; // Float
    defaultChannelSlug: string | null; // String
    group: string; // String!
    id: string | null; // ID
    isSupported: boolean | null; // Boolean
    name: string; // String!
    slug: string; // String!
    sportsIDs: string[]; // [String!]!
    supporterCount: number | null; // Int
    totalUnreadMessagesCount: number | null; // Int
    updatedAt: number | null; // Float
  };
  LockerRooms: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['LockerRoom'][] | null; // [LockerRoom!]
    next: number | null; // Int
    total: number | null; // Int
  };
  LockerRoomsByLeague: {
    // field return type
    LockerRooms: NexusGenRootTypes['LockerRooms']; // LockerRooms!
    leagueID: string; // String!
    leagueName: string; // String!
  };
  Me: {
    // field return type
    Avatar: NexusGenRootTypes['Media'] | null; // Media
    Supporting: NexusGenRootTypes['LockerRoom'][] | null; // [LockerRoom!]
    ZipCode: NexusGenRootTypes['ZipCode'] | null; // ZipCode
    createdAt: number | null; // Float
    emailAddress: string; // String!
    firstName: string | null; // String
    id: string | null; // ID
    lastName: string | null; // String
    name: string; // String!
    slug: string; // String!
    uid: string; // String!
    unseenNotifications: number; // Int!
    updatedAt: number | null; // Float
    username: string; // String!
    zipCode: string | null; // String
  };
  Media: {
    // field return type
    PhotoURL: string | null; // String
    isSport: boolean | null; // Boolean
    objectID: string; // String!
    objectType: string; // String!
  };
  MediaMessage: {
    // field return type
    PhotoURL: string | null; // String
    isSport: boolean | null; // Boolean
    objectID: string; // String!
    objectType: string; // String!
  };
  Message: {
    // field return type
    Media: NexusGenRootTypes['MediaMessage'][] | null; // [MediaMessage!]
    PhotoURLs: NexusGenRootTypes['PhotoURL'][] | null; // [PhotoURL!]
    RepliedTo: NexusGenRootTypes['Message'] | null; // Message
    User: NexusGenRootTypes['User'] | null; // User
    channelSlug: string; // String!
    chatID: string; // String!
    createdAt: number | null; // Float
    id: string | null; // ID
    isDeletedEveryone: boolean | null; // Boolean
    isDeletedSelf: boolean | null; // Boolean
    isEdited: boolean | null; // Boolean
    isUserBlocked: boolean | null; // Boolean
    repliedToChatID: string | null; // String
    text: string | null; // String
    updatedAt: number | null; // Float
    userID: string; // String!
  };
  Messages: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['Message'][] | null; // [Message!]
    next: number | null; // Int
    total: number | null; // Int
  };
  MessagesNextAsString: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['Message'][] | null; // [Message!]
    next: string | null; // String
    total: number | null; // Int
  };
  Mutation: {
    // field return type
    addMembersToPrivateChannel: NexusGenRootTypes['MutationResult']; // MutationResult!
    addZipCode: NexusGenRootTypes['ZipCode']; // ZipCode!
    blockUser: NexusGenRootTypes['MutationResult']; // MutationResult!
    createChannel: NexusGenRootTypes['MutationResult']; // MutationResult!
    createChannelGroup: NexusGenRootTypes['MutationResult']; // MutationResult!
    createClub: NexusGenRootTypes['MutationResult']; // MutationResult!
    createFormEntry: NexusGenRootTypes['MutationResult']; // MutationResult!
    createUser: NexusGenRootTypes['MutationResult']; // MutationResult!
    deleteChannel: NexusGenRootTypes['MutationResult']; // MutationResult!
    deleteChannelGroup: NexusGenRootTypes['MutationResult']; // MutationResult!
    deleteFirebaseAccount: NexusGenRootTypes['MutationResult']; // MutationResult!
    deleteImages: NexusGenRootTypes['MutationResult']; // MutationResult!
    deleteMessage: NexusGenRootTypes['MutationResult']; // MutationResult!
    deleteUser: NexusGenRootTypes['MutationResult']; // MutationResult!
    editChannel: NexusGenRootTypes['MutationResult']; // MutationResult!
    editChannelGroup: NexusGenRootTypes['MutationResult']; // MutationResult!
    editClub: NexusGenRootTypes['MutationResult']; // MutationResult!
    editLockerRoomUserRole: NexusGenRootTypes['MutationResult']; // MutationResult!
    editMessage: NexusGenRootTypes['MutationResult']; // MutationResult!
    editUser: NexusGenRootTypes['MutationResult']; // MutationResult!
    generateInviteUrlToPrivateChannel: NexusGenRootTypes['MutationResultWithInviteUrl']; // MutationResultWithInviteUrl!
    inviteUserForManagerialRole: NexusGenRootTypes['MutationResult']; // MutationResult!
    leavePrivateChannel: NexusGenRootTypes['MutationResult']; // MutationResult!
    readMessage: NexusGenRootTypes['MutationResult']; // MutationResult!
    readNotification: NexusGenRootTypes['MutationResult']; // MutationResult!
    registerInterest: NexusGenRootTypes['MutationResult']; // MutationResult!
    removeUserManagerialRole: NexusGenRootTypes['MutationResult']; // MutationResult!
    respondUserManagerialRoleInvite: NexusGenRootTypes['MutationResult']; // MutationResult!
    seenNotification: NexusGenRootTypes['MutationResult']; // MutationResult!
    sendMessage: NexusGenRootTypes['MutationResult']; // MutationResult!
    setGameReminder: NexusGenRootTypes['MutationResult']; // MutationResult!
    support: NexusGenRootTypes['MutationResult']; // MutationResult!
    testReminderPushNotification: NexusGenRootTypes['MutationResult'] | null; // MutationResult
    trackLogin: NexusGenRootTypes['MutationResult']; // MutationResult!
    trackRegisterAccount: NexusGenRootTypes['MutationResult']; // MutationResult!
    trackSendMessage: NexusGenRootTypes['MutationResult']; // MutationResult!
    trackSupportLockerRoom: NexusGenRootTypes['MutationResult']; // MutationResult!
    trackUnsupportLockerRoom: NexusGenRootTypes['MutationResult']; // MutationResult!
    trackViewPage: NexusGenRootTypes['MutationResult']; // MutationResult!
    unblockUser: NexusGenRootTypes['MutationResult']; // MutationResult!
    undeleteChannel: NexusGenRootTypes['MutationResult']; // MutationResult!
    undeleteChannelGroup: NexusGenRootTypes['MutationResult']; // MutationResult!
    unsetGameReminder: NexusGenRootTypes['MutationResult']; // MutationResult!
    unsupport: NexusGenRootTypes['MutationResult']; // MutationResult!
    updateLockerRoomUserRoles: NexusGenRootTypes['MutationResult']; // MutationResult!
  };
  MutationResult: {
    // field return type
    objectID: string | null; // String
    objectType: string | null; // String
    success: boolean; // Boolean!
    timestamp: number | null; // Float
  };
  MutationResultWithInviteUrl: {
    // field return type
    inviteUrl: string; // String!
    objectID: string | null; // String
    objectType: string | null; // String
    success: boolean; // Boolean!
    timestamp: number | null; // Float
  };
  Notification: {
    // field return type
    Actor: NexusGenRootTypes['User']; // User!
    LockerRoom: NexusGenRootTypes['LockerRoom']; // LockerRoom!
    Message: NexusGenRootTypes['Message']; // Message!
    actorUid: string; // String!
    actorUserID: string; // String!
    channelName: string; // String!
    channelSlug: string; // String!
    chatID: string; // String!
    createdAt: number | null; // Float
    id: string | null; // ID
    isRead: boolean | null; // Boolean
    isSeen: boolean | null; // Boolean
    messageID: string; // String!
    targetUid: string; // String!
    targetUserID: string; // String!
    type: string; // String!
  };
  NotificationWithMessages: {
    // field return type
    Messages: NexusGenRootTypes['Message'][]; // [Message!]!
    Notification: NexusGenRootTypes['Notification']; // Notification!
  };
  Notifications: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['Notification'][] | null; // [Notification!]
    next: number | null; // Int
    total: number | null; // Int
  };
  PhotoURL: {
    // field return type
    photoURL: string | null; // String
    type: string; // String!
  };
  Query: {
    // field return type
    Me: NexusGenRootTypes['Me'] | null; // Me
    Supporting: Array<NexusGenRootTypes['LockerRoom'] | null> | null; // [LockerRoom]
    channelExists: boolean | null; // Boolean
    channelGroupExists: boolean | null; // Boolean
    getActualEventInviteLink: string; // String!
    getAllUsersViaUsername: NexusGenRootTypes['Users']; // Users!
    getAvailableUsersForPrivateChannel: NexusGenRootTypes['Users']; // Users!
    getChannel: NexusGenRootTypes['Channel'] | null; // Channel
    getChannelGroup: NexusGenRootTypes['ChannelGroup'] | null; // ChannelGroup
    getChannelGroups: NexusGenRootTypes['ChannelGroups']; // ChannelGroups!
    getChannels: NexusGenRootTypes['Channels']; // Channels!
    getClub: NexusGenRootTypes['Club'] | null; // Club
    getClubs: NexusGenRootTypes['Clubs']; // Clubs!
    getDeletedChannelAndChannelGroups: NexusGenRootTypes['ChannelAndChannelGroup'] | null; // ChannelAndChannelGroup
    getDynamicEventInviteLink: string; // String!
    getFanGroup: NexusGenRootTypes['FanGroup'] | null; // FanGroup
    getFanGroups: NexusGenRootTypes['FanGroups']; // FanGroups!
    getFeatured: NexusGenRootTypes['LockerRoom'][]; // [LockerRoom!]!
    getFeaturedGame: NexusGenRootTypes['Game'] | null; // Game
    getGame: NexusGenRootTypes['Game'] | null; // Game
    getGamePartners: NexusGenRootTypes['GamePartners']; // GamePartners!
    getGameRemindersForCloudFunction: Array<NexusGenRootTypes['GameReminder'] | null>; // [GameReminder]!
    getGames: NexusGenRootTypes['Games']; // Games!
    getInHouse: NexusGenRootTypes['InHouse'] | null; // InHouse
    getInHouses: NexusGenRootTypes['InHouses']; // InHouses!
    getLeague: NexusGenRootTypes['League'] | null; // League
    getLeagues: NexusGenRootTypes['Leagues']; // Leagues!
    getLockerRoom: NexusGenRootTypes['LockerRoom'] | null; // LockerRoom
    getLockerRooms: NexusGenRootTypes['LockerRooms']; // LockerRooms!
    getMessage: NexusGenRootTypes['Message'] | null; // Message
    getMessagesByChannelSlug: NexusGenRootTypes['Messages']; // Messages!
    getMessagesByChannelSlugUsingCreatedAtAsCursor: NexusGenRootTypes['MessagesNextAsString']; // MessagesNextAsString!
    getMessagesByChannelSlugUsingCreatedAtAsCursorFromNotification: NexusGenRootTypes['MessagesNextAsString']; // MessagesNextAsString!
    getMessagesByChannelSlugUsingCreatedAtAsCursorV2: NexusGenRootTypes['MessagesNextAsString']; // MessagesNextAsString!
    getNotification: NexusGenRootTypes['Notification'] | null; // Notification
    getNotificationWithMessages: NexusGenRootTypes['NotificationWithMessages'] | null; // NotificationWithMessages
    getNotifications: NexusGenRootTypes['Notifications'] | null; // Notifications
    getPhotoURL: string | null; // String
    getPhotoURLs: Array<string | null> | null; // [String]
    getSport: NexusGenRootTypes['Sport'] | null; // Sport
    getSports: NexusGenRootTypes['Sports']; // Sports!
    getSportsWithIcon: NexusGenRootTypes['Sports']; // Sports!
    getUnreadMessages: Array<NexusGenRootTypes['ReadMessage'] | null> | null; // [ReadMessage]
    getUser: NexusGenRootTypes['User'] | null; // User
    getUserInvite: NexusGenRootTypes['UserInvite'] | null; // UserInvite
    getUserRolesInLockerRoom: NexusGenRootTypes['UserRolesInLockerRoom'] | null; // UserRolesInLockerRoom
    getUsers: NexusGenRootTypes['Users']; // Users!
    getUsersByLockerRoom: NexusGenRootTypes['Users']; // Users!
    getUtilities: NexusGenRootTypes['Utilities'] | null; // Utilities
    getZipCode: NexusGenRootTypes['ZipCode'] | null; // ZipCode
    invitedUserExists: boolean | null; // Boolean
    userNameExists: boolean | null; // Boolean
  };
  ReadMessage: {
    // field return type
    channelSlug: string; // String!
    unreadMessagesCount: number | null; // Float
  };
  Sport: {
    // field return type
    Avatar: NexusGenRootTypes['Media']; // Media!
    CoverPhoto: NexusGenRootTypes['Media']; // Media!
    FanGroupLockerRooms: NexusGenRootTypes['LockerRooms']; // LockerRooms!
    Icon: NexusGenRootTypes['Media'] | null; // Media
    LockerRooms: NexusGenRootTypes['LockerRooms']; // LockerRooms!
    LockerRoomsByLeague: NexusGenRootTypes['LockerRoomsByLeague'][]; // [LockerRoomsByLeague!]!
    createdAt: number | null; // Float
    id: string | null; // ID
    name: string; // String!
    slug: string; // String!
    status: string | null; // String
    updatedAt: number | null; // Float
  };
  Sports: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['Sport'][] | null; // [Sport!]
    next: number | null; // Int
    total: number | null; // Int
  };
  User: {
    // field return type
    Avatar: NexusGenRootTypes['Media'] | null; // Media
    createdAt: number | null; // Float
    emailAddress: string; // String!
    firstName: string | null; // String
    id: string | null; // ID
    isBlocked: boolean | null; // Boolean
    lastName: string | null; // String
    name: string; // String!
    online: boolean | null; // Boolean
    slug: string; // String!
    uid: string; // String!
    updatedAt: number | null; // Float
    username: string; // String!
  };
  UserInvite: {
    // field return type
    data: NexusGenRootTypes['UserInviteData'] | null; // UserInviteData
    expiration: number | null; // Float
    group: string; // String!
    id: string | null; // ID
    time: number | null; // Float
    type: string; // String!
    url: string | null; // String
    userID: string; // String!
  };
  UserInviteData: {
    // field return type
    emailAddress: string | null; // String
    group: string | null; // String
    lockerRoomID: string | null; // String
    lockerRoomSlug: string | null; // String
    role: string | null; // String
  };
  UserRole: {
    // field return type
    User: NexusGenRootTypes['User']; // User!
    UserRoleType: NexusGenRootTypes['UserRoleType'][] | null; // [UserRoleType!]
    createdAt: number | null; // Float
    group: string; // String!
    groupID: string; // String!
    groupType: string; // String!
    id: string | null; // ID
    isPrimaryOwner: boolean | null; // Boolean
    lockerRoomID: string; // String!
    role: string; // String!
    status: string; // String!
    uid: string; // String!
    updatedAt: number | null; // Float
    userID: string; // String!
  };
  UserRoleType: {
    // field return type
    id: string | null; // ID
    name: string; // String!
  };
  UserRoles: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['UserRole'][] | null; // [UserRole!]
    next: number | null; // Int
    total: number | null; // Int
  };
  UserRolesInLockerRoom: {
    // field return type
    Managers: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
    Owners: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
    Supporters: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
  };
  UserRolesInPrivateChannel: {
    // field return type
    Joiners: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
    Owners: NexusGenRootTypes['UserRole'][]; // [UserRole!]!
  };
  Users: {
    // field return type
    count: number | null; // Int
    items: NexusGenRootTypes['User'][] | null; // [User!]
    next: string | null; // String
    total: number | null; // Int
  };
  Utilities: {
    // field return type
    Utilities: NexusGenScalars['JSON'] | null; // JSON
  };
  ZipCode: {
    // field return type
    city: string; // String!
    country: string; // String!
    latitude: number; // Float!
    longitude: number; // Float!
    state: string; // String!
    zip: string; // String!
  };
}

export interface NexusGenFieldTypeNames {
  Channel: {
    // field return type name
    Livestream: 'Livestream';
    Roles: 'UserRolesInPrivateChannel';
    channelGroupID: 'String';
    createdAt: 'Float';
    description: 'String';
    id: 'ID';
    isDeleted: 'Boolean';
    livestreamID: 'String';
    lockerRoomID: 'String';
    name: 'String';
    slug: 'String';
    type: 'String';
    unreadMessagesCount: 'Float';
    updatedAt: 'Float';
  };
  ChannelAndChannelGroup: {
    // field return type name
    ChannelGroups: 'ChannelGroup';
    Channels: 'Channel';
  };
  ChannelGroup: {
    // field return type name
    Channels: 'Channel';
    createdAt: 'Float';
    description: 'String';
    group: 'String';
    id: 'ID';
    isDeleted: 'Boolean';
    lockerRoomID: 'String';
    name: 'String';
    slug: 'String';
    updatedAt: 'Float';
    withLivestream: 'Boolean';
  };
  ChannelGroups: {
    // field return type name
    count: 'Int';
    items: 'ChannelGroup';
    next: 'Int';
    total: 'Int';
  };
  Channels: {
    // field return type name
    count: 'Int';
    items: 'Channel';
    next: 'Int';
    total: 'Int';
  };
  Club: {
    // field return type name
    Avatar: 'Media';
    CoverPhoto: 'Media';
    createdAt: 'Float';
    defaultChannelSlug: 'String';
    id: 'ID';
    isFeatured: 'Boolean';
    leagueID: 'String';
    leagueName: 'String';
    name: 'String';
    slug: 'String';
    sportIDs: 'String';
    supporterCount: 'Int';
    updatedAt: 'Float';
  };
  Clubs: {
    // field return type name
    count: 'Int';
    items: 'Club';
    next: 'Int';
    total: 'Int';
  };
  FanGroup: {
    // field return type name
    Avatar: 'Media';
    CoverPhoto: 'Media';
    createdAt: 'Float';
    id: 'ID';
    isDeleted: 'Boolean';
    name: 'String';
    slug: 'String';
    sportIDs: 'String';
    updatedAt: 'Float';
  };
  FanGroups: {
    // field return type name
    count: 'Int';
    items: 'FanGroup';
    next: 'Int';
    total: 'Int';
  };
  Game: {
    // field return type name
    competition: 'String';
    coverImage: 'String';
    date: 'Float';
    gameID: 'Int';
    group: 'String';
    headline: 'String';
    highPoints: 'Int';
    isLive: 'Boolean';
    isReminded: 'Boolean';
    leagueCode: 'String';
    links: 'Link';
    location: 'String';
    points: 'Int';
    pointsLevel: 'String';
    sport: 'String';
    team1City: 'String';
    team1Color: 'String';
    team1DisplayName: 'String';
    team1ID: 'Int';
    team1Name: 'String';
    team1Nickname: 'String';
    team1Ranking: 'Int';
    team1Score: 'Int';
    team2City: 'String';
    team2Color: 'String';
    team2DisplayName: 'String';
    team2ID: 'Int';
    team2Name: 'String';
    team2Nickname: 'String';
    team2Ranking: 'Int';
    team2Score: 'Int';
    timeLeft: 'String';
  };
  GameByLeague: {
    // field return type name
    concacaf: 'Games';
    efl: 'Games';
    epl: 'Games';
    mlb: 'Games';
    mls: 'Games';
    nba: 'Games';
    ncaa: 'Games';
    nhl: 'Games';
    uefa: 'Games';
    wnba: 'Games';
  };
  GamePartner: {
    // field return type name
    Icon: 'Media';
    Logo: 'Media';
    id: 'ID';
    isHidden: 'Boolean';
    name: 'String';
    slug: 'String';
  };
  GamePartners: {
    // field return type name
    count: 'Int';
    items: 'GamePartner';
    next: 'Int';
    total: 'Int';
  };
  GameReminder: {
    // field return type name
    createdAt: 'Float';
    emailBatchID: 'String';
    gameID: 'String';
    reminderSent: 'Boolean';
    scheduledTime: 'Float';
    uid: 'String';
    updatedAt: 'Float';
    userID: 'String';
  };
  Games: {
    // field return type name
    count: 'Int';
    items: 'Game';
    next: 'String';
    total: 'Int';
  };
  InHouse: {
    // field return type name
    Avatar: 'Media';
    CoverPhoto: 'Media';
    createdAt: 'Float';
    id: 'ID';
    name: 'String';
    slug: 'String';
    sportIDs: 'String';
    updatedAt: 'Float';
  };
  InHouses: {
    // field return type name
    count: 'Int';
    items: 'InHouse';
    next: 'Int';
    total: 'Int';
  };
  InviteLinks: {
    // field return type name
    actualLink: 'String';
    inviteLink: 'String';
  };
  League: {
    // field return type name
    Avatar: 'Media';
    CoverPhoto: 'Media';
    boost: 'Float';
    createdAt: 'Float';
    id: 'ID';
    name: 'String';
    slug: 'String';
    sportIDs: 'String';
    updatedAt: 'Float';
  };
  Leagues: {
    // field return type name
    count: 'Int';
    items: 'League';
    next: 'Int';
    total: 'Int';
  };
  Link: {
    // field return type name
    avatarUrl: 'String';
    iconUrl: 'String';
    logoUrl: 'String';
    source: 'String';
    type: 'String';
    url: 'String';
  };
  Livestream: {
    // field return type name
    LivestreamSource: 'LivestreamSource';
    createdAt: 'Float';
    id: 'ID';
    isLive: 'Boolean';
    link: 'String';
    source: 'String';
    startDate: 'String';
    timezone: 'String';
    title: 'String';
    updatedAt: 'Float';
  };
  LivestreamSource: {
    // field return type name
    id: 'ID';
    name: 'String';
  };
  LockerRoom: {
    // field return type name
    ChannelGroups: 'ChannelGroup';
    Club: 'Club';
    FanGroup: 'FanGroup';
    Game: 'Game';
    InHouse: 'InHouse';
    League: 'League';
    MyRole: 'UserRole';
    Roles: 'UserRolesInLockerRoom';
    Sports: 'Sport';
    channelCount: 'Int';
    createdAt: 'Float';
    defaultChannelSlug: 'String';
    group: 'String';
    id: 'ID';
    isSupported: 'Boolean';
    name: 'String';
    slug: 'String';
    sportsIDs: 'String';
    supporterCount: 'Int';
    totalUnreadMessagesCount: 'Int';
    updatedAt: 'Float';
  };
  LockerRooms: {
    // field return type name
    count: 'Int';
    items: 'LockerRoom';
    next: 'Int';
    total: 'Int';
  };
  LockerRoomsByLeague: {
    // field return type name
    LockerRooms: 'LockerRooms';
    leagueID: 'String';
    leagueName: 'String';
  };
  Me: {
    // field return type name
    Avatar: 'Media';
    Supporting: 'LockerRoom';
    ZipCode: 'ZipCode';
    createdAt: 'Float';
    emailAddress: 'String';
    firstName: 'String';
    id: 'ID';
    lastName: 'String';
    name: 'String';
    slug: 'String';
    uid: 'String';
    unseenNotifications: 'Int';
    updatedAt: 'Float';
    username: 'String';
    zipCode: 'String';
  };
  Media: {
    // field return type name
    PhotoURL: 'String';
    isSport: 'Boolean';
    objectID: 'String';
    objectType: 'String';
  };
  MediaMessage: {
    // field return type name
    PhotoURL: 'String';
    isSport: 'Boolean';
    objectID: 'String';
    objectType: 'String';
  };
  Message: {
    // field return type name
    Media: 'MediaMessage';
    PhotoURLs: 'PhotoURL';
    RepliedTo: 'Message';
    User: 'User';
    channelSlug: 'String';
    chatID: 'String';
    createdAt: 'Float';
    id: 'ID';
    isDeletedEveryone: 'Boolean';
    isDeletedSelf: 'Boolean';
    isEdited: 'Boolean';
    isUserBlocked: 'Boolean';
    repliedToChatID: 'String';
    text: 'String';
    updatedAt: 'Float';
    userID: 'String';
  };
  Messages: {
    // field return type name
    count: 'Int';
    items: 'Message';
    next: 'Int';
    total: 'Int';
  };
  MessagesNextAsString: {
    // field return type name
    count: 'Int';
    items: 'Message';
    next: 'String';
    total: 'Int';
  };
  Mutation: {
    // field return type name
    addMembersToPrivateChannel: 'MutationResult';
    addZipCode: 'ZipCode';
    blockUser: 'MutationResult';
    createChannel: 'MutationResult';
    createChannelGroup: 'MutationResult';
    createClub: 'MutationResult';
    createFormEntry: 'MutationResult';
    createUser: 'MutationResult';
    deleteChannel: 'MutationResult';
    deleteChannelGroup: 'MutationResult';
    deleteFirebaseAccount: 'MutationResult';
    deleteImages: 'MutationResult';
    deleteMessage: 'MutationResult';
    deleteUser: 'MutationResult';
    editChannel: 'MutationResult';
    editChannelGroup: 'MutationResult';
    editClub: 'MutationResult';
    editLockerRoomUserRole: 'MutationResult';
    editMessage: 'MutationResult';
    editUser: 'MutationResult';
    generateInviteUrlToPrivateChannel: 'MutationResultWithInviteUrl';
    inviteUserForManagerialRole: 'MutationResult';
    leavePrivateChannel: 'MutationResult';
    readMessage: 'MutationResult';
    readNotification: 'MutationResult';
    registerInterest: 'MutationResult';
    removeUserManagerialRole: 'MutationResult';
    respondUserManagerialRoleInvite: 'MutationResult';
    seenNotification: 'MutationResult';
    sendMessage: 'MutationResult';
    setGameReminder: 'MutationResult';
    support: 'MutationResult';
    testReminderPushNotification: 'MutationResult';
    trackLogin: 'MutationResult';
    trackRegisterAccount: 'MutationResult';
    trackSendMessage: 'MutationResult';
    trackSupportLockerRoom: 'MutationResult';
    trackUnsupportLockerRoom: 'MutationResult';
    trackViewPage: 'MutationResult';
    unblockUser: 'MutationResult';
    undeleteChannel: 'MutationResult';
    undeleteChannelGroup: 'MutationResult';
    unsetGameReminder: 'MutationResult';
    unsupport: 'MutationResult';
    updateLockerRoomUserRoles: 'MutationResult';
  };
  MutationResult: {
    // field return type name
    objectID: 'String';
    objectType: 'String';
    success: 'Boolean';
    timestamp: 'Float';
  };
  MutationResultWithInviteUrl: {
    // field return type name
    inviteUrl: 'String';
    objectID: 'String';
    objectType: 'String';
    success: 'Boolean';
    timestamp: 'Float';
  };
  Notification: {
    // field return type name
    Actor: 'User';
    LockerRoom: 'LockerRoom';
    Message: 'Message';
    actorUid: 'String';
    actorUserID: 'String';
    channelName: 'String';
    channelSlug: 'String';
    chatID: 'String';
    createdAt: 'Float';
    id: 'ID';
    isRead: 'Boolean';
    isSeen: 'Boolean';
    messageID: 'String';
    targetUid: 'String';
    targetUserID: 'String';
    type: 'String';
  };
  NotificationWithMessages: {
    // field return type name
    Messages: 'Message';
    Notification: 'Notification';
  };
  Notifications: {
    // field return type name
    count: 'Int';
    items: 'Notification';
    next: 'Int';
    total: 'Int';
  };
  PhotoURL: {
    // field return type name
    photoURL: 'String';
    type: 'String';
  };
  Query: {
    // field return type name
    Me: 'Me';
    Supporting: 'LockerRoom';
    channelExists: 'Boolean';
    channelGroupExists: 'Boolean';
    getActualEventInviteLink: 'String';
    getAllUsersViaUsername: 'Users';
    getAvailableUsersForPrivateChannel: 'Users';
    getChannel: 'Channel';
    getChannelGroup: 'ChannelGroup';
    getChannelGroups: 'ChannelGroups';
    getChannels: 'Channels';
    getClub: 'Club';
    getClubs: 'Clubs';
    getDeletedChannelAndChannelGroups: 'ChannelAndChannelGroup';
    getDynamicEventInviteLink: 'String';
    getFanGroup: 'FanGroup';
    getFanGroups: 'FanGroups';
    getFeatured: 'LockerRoom';
    getFeaturedGame: 'Game';
    getGame: 'Game';
    getGamePartners: 'GamePartners';
    getGameRemindersForCloudFunction: 'GameReminder';
    getGames: 'Games';
    getInHouse: 'InHouse';
    getInHouses: 'InHouses';
    getLeague: 'League';
    getLeagues: 'Leagues';
    getLockerRoom: 'LockerRoom';
    getLockerRooms: 'LockerRooms';
    getMessage: 'Message';
    getMessagesByChannelSlug: 'Messages';
    getMessagesByChannelSlugUsingCreatedAtAsCursor: 'MessagesNextAsString';
    getMessagesByChannelSlugUsingCreatedAtAsCursorFromNotification: 'MessagesNextAsString';
    getMessagesByChannelSlugUsingCreatedAtAsCursorV2: 'MessagesNextAsString';
    getNotification: 'Notification';
    getNotificationWithMessages: 'NotificationWithMessages';
    getNotifications: 'Notifications';
    getPhotoURL: 'String';
    getPhotoURLs: 'String';
    getSport: 'Sport';
    getSports: 'Sports';
    getSportsWithIcon: 'Sports';
    getUnreadMessages: 'ReadMessage';
    getUser: 'User';
    getUserInvite: 'UserInvite';
    getUserRolesInLockerRoom: 'UserRolesInLockerRoom';
    getUsers: 'Users';
    getUsersByLockerRoom: 'Users';
    getUtilities: 'Utilities';
    getZipCode: 'ZipCode';
    invitedUserExists: 'Boolean';
    userNameExists: 'Boolean';
  };
  ReadMessage: {
    // field return type name
    channelSlug: 'String';
    unreadMessagesCount: 'Float';
  };
  Sport: {
    // field return type name
    Avatar: 'Media';
    CoverPhoto: 'Media';
    FanGroupLockerRooms: 'LockerRooms';
    Icon: 'Media';
    LockerRooms: 'LockerRooms';
    LockerRoomsByLeague: 'LockerRoomsByLeague';
    createdAt: 'Float';
    id: 'ID';
    name: 'String';
    slug: 'String';
    status: 'String';
    updatedAt: 'Float';
  };
  Sports: {
    // field return type name
    count: 'Int';
    items: 'Sport';
    next: 'Int';
    total: 'Int';
  };
  User: {
    // field return type name
    Avatar: 'Media';
    createdAt: 'Float';
    emailAddress: 'String';
    firstName: 'String';
    id: 'ID';
    isBlocked: 'Boolean';
    lastName: 'String';
    name: 'String';
    online: 'Boolean';
    slug: 'String';
    uid: 'String';
    updatedAt: 'Float';
    username: 'String';
  };
  UserInvite: {
    // field return type name
    data: 'UserInviteData';
    expiration: 'Float';
    group: 'String';
    id: 'ID';
    time: 'Float';
    type: 'String';
    url: 'String';
    userID: 'String';
  };
  UserInviteData: {
    // field return type name
    emailAddress: 'String';
    group: 'String';
    lockerRoomID: 'String';
    lockerRoomSlug: 'String';
    role: 'String';
  };
  UserRole: {
    // field return type name
    User: 'User';
    UserRoleType: 'UserRoleType';
    createdAt: 'Float';
    group: 'String';
    groupID: 'String';
    groupType: 'String';
    id: 'ID';
    isPrimaryOwner: 'Boolean';
    lockerRoomID: 'String';
    role: 'String';
    status: 'String';
    uid: 'String';
    updatedAt: 'Float';
    userID: 'String';
  };
  UserRoleType: {
    // field return type name
    id: 'ID';
    name: 'String';
  };
  UserRoles: {
    // field return type name
    count: 'Int';
    items: 'UserRole';
    next: 'Int';
    total: 'Int';
  };
  UserRolesInLockerRoom: {
    // field return type name
    Managers: 'UserRole';
    Owners: 'UserRole';
    Supporters: 'UserRole';
  };
  UserRolesInPrivateChannel: {
    // field return type name
    Joiners: 'UserRole';
    Owners: 'UserRole';
  };
  Users: {
    // field return type name
    count: 'Int';
    items: 'User';
    next: 'String';
    total: 'Int';
  };
  Utilities: {
    // field return type name
    Utilities: 'JSON';
  };
  ZipCode: {
    // field return type name
    city: 'String';
    country: 'String';
    latitude: 'Float';
    longitude: 'Float';
    state: 'String';
    zip: 'String';
  };
}

export interface NexusGenArgTypes {
  LockerRoomsByLeague: {
    LockerRooms: {
      // args
      count?: number | null; // Int
      cursor?: number | null; // Int
    };
  };
  Media: {
    PhotoURL: {
      // args
      type?: string | null; // String
    };
  };
  MediaMessage: {
    PhotoURL: {
      // args
      type?: string | null; // String
    };
  };
  Mutation: {
    addMembersToPrivateChannel: {
      // args
      privateChannelID: string; // String!
      userIDs: string; // String!
    };
    addZipCode: {
      // args
      zipCode: string; // String!
    };
    blockUser: {
      // args
      targetUserID: string; // String!
    };
    createChannel: {
      // args
      input: NexusGenInputs['InputCreateChannel']; // InputCreateChannel!
    };
    createChannelGroup: {
      // args
      input: NexusGenInputs['InputCreateChannelGroup']; // InputCreateChannelGroup!
    };
    createClub: {
      // args
      input: NexusGenInputs['InputCreateClub']; // InputCreateClub!
    };
    createFormEntry: {
      // args
      data?: NexusGenScalars['JSON'] | null; // JSON
      type: string; // String!
    };
    createUser: {
      // args
      input: NexusGenInputs['InputUser']; // InputUser!
    };
    deleteChannel: {
      // args
      id: string; // String!
    };
    deleteChannelGroup: {
      // args
      id: string; // String!
    };
    deleteImages: {
      // args
      objectIDs: string[]; // [String!]!
    };
    deleteMessage: {
      // args
      chatID: string; // String!
      deleteForEveryone: boolean; // Boolean!
      deleteForSelf: boolean; // Boolean!
    };
    editChannel: {
      // args
      id: string; // String!
      input: NexusGenInputs['InputEditChannel']; // InputEditChannel!
    };
    editChannelGroup: {
      // args
      id: string; // String!
      input: NexusGenInputs['InputEditChannelGroup']; // InputEditChannelGroup!
    };
    editClub: {
      // args
      id: string; // String!
      input: NexusGenInputs['InputEditClub']; // InputEditClub!
    };
    editLockerRoomUserRole: {
      // args
      lockerRoomID: string; // String!
      role: string; // String!
      userID: string; // String!
    };
    editMessage: {
      // args
      Media?: NexusGenInputs['InputMedia'][] | null; // [InputMedia!]
      MentionedUserIDs?: string[] | null; // [String!]
      chatID: string; // String!
      repliedToChatID?: string | null; // String
      text?: string | null; // String
    };
    editUser: {
      // args
      input: NexusGenInputs['InputEditUser']; // InputEditUser!
    };
    generateInviteUrlToPrivateChannel: {
      // args
      gameID: string; // String!
      privateChannelID: string; // String!
    };
    inviteUserForManagerialRole: {
      // args
      input: NexusGenInputs['InputInviteUserForManagerialRole'][]; // [InputInviteUserForManagerialRole!]!
      lockerRoomID: string; // String!
    };
    leavePrivateChannel: {
      // args
      privateChannelID: string; // String!
    };
    readMessage: {
      // args
      channelSlug: string; // String!
    };
    readNotification: {
      // args
      notificationIDs: string[]; // [String!]!
    };
    registerInterest: {
      // args
      data?: NexusGenScalars['JSON'] | null; // JSON
      type: string; // String!
    };
    removeUserManagerialRole: {
      // args
      lockerRoomID: string; // String!
      role: string; // String!
      userID: string; // String!
    };
    respondUserManagerialRoleInvite: {
      // args
      id: string; // String!
    };
    seenNotification: {
      // args
      lastNotificationID: string; // String!
    };
    sendMessage: {
      // args
      Media?: NexusGenInputs['InputMedia'][] | null; // [InputMedia!]
      MentionedUserIDs?: string[] | null; // [String!]
      channelSlug: string; // String!
      chatID: string; // String!
      repliedToChatID?: string | null; // String
      text?: string | null; // String
    };
    setGameReminder: {
      // args
      gameID: string; // String!
    };
    support: {
      // args
      lockerRoomID: string; // String!
    };
    testReminderPushNotification: {
      // args
      userID: string; // String!
    };
    trackLogin: {
      // args
      browser?: string | null; // String
      browserVersion?: string | null; // String
      ip?: string | null; // String
      loginMethod: string; // String!
      model?: string | null; // String
      os?: string | null; // String
      pageName: string; // String!
      platform: string; // String!
      webDisplaySize?: string | null; // String
    };
    trackRegisterAccount: {
      // args
      avatar: string; // String!
      avatarObjectID?: string | null; // String
      browser?: string | null; // String
      browserVersion?: string | null; // String
      emailAddress: string; // String!
      ip?: string | null; // String
      model?: string | null; // String
      os?: string | null; // String
      pageName: string; // String!
      platform: string; // String!
      registrationMethod: string; // String!
      username: string; // String!
      webDisplaySize?: string | null; // String
    };
    trackSendMessage: {
      // args
      browser?: string | null; // String
      browserVersion?: string | null; // String
      channel: string; // String!
      ip?: string | null; // String
      league?: string | null; // String
      lockerRoomType: string; // String!
      model?: string | null; // String
      name: string; // String!
      os?: string | null; // String
      pageName: string; // String!
      platform: string; // String!
      sport: string; // String!
      type: string; // String!
      webDisplaySize?: string | null; // String
    };
    trackSupportLockerRoom: {
      // args
      browser?: string | null; // String
      browserVersion?: string | null; // String
      ip?: string | null; // String
      league?: string | null; // String
      lockerRoomType: string; // String!
      model?: string | null; // String
      name: string; // String!
      os?: string | null; // String
      pageName: string; // String!
      platform: string; // String!
      sport: string; // String!
      webDisplaySize?: string | null; // String
    };
    trackUnsupportLockerRoom: {
      // args
      browser?: string | null; // String
      browserVersion?: string | null; // String
      ip?: string | null; // String
      league?: string | null; // String
      lockerRoomType: string; // String!
      model?: string | null; // String
      name: string; // String!
      os?: string | null; // String
      pageName: string; // String!
      platform: string; // String!
      sport: string; // String!
      webDisplaySize?: string | null; // String
    };
    trackViewPage: {
      // args
      browser?: string | null; // String
      browserVersion?: string | null; // String
      channel?: string | null; // String
      ip?: string | null; // String
      league?: string | null; // String
      lockerRoomType?: string | null; // String
      model?: string | null; // String
      name?: string | null; // String
      os?: string | null; // String
      pageName: string; // String!
      platform: string; // String!
      sport?: string | null; // String
      webDisplaySize?: string | null; // String
    };
    unblockUser: {
      // args
      targetUserID: string; // String!
    };
    undeleteChannel: {
      // args
      id: string; // String!
    };
    undeleteChannelGroup: {
      // args
      id: string; // String!
    };
    unsetGameReminder: {
      // args
      gameID: string; // String!
    };
    unsupport: {
      // args
      lockerRoomID: string; // String!
    };
    updateLockerRoomUserRoles: {
      // args
      input: NexusGenInputs['InputUpdateLockerRoomUserRoles'][]; // [InputUpdateLockerRoomUserRoles!]!
      lockerRoomID: string; // String!
    };
  };
  Query: {
    channelExists: {
      // args
      channelGroupID: string; // String!
      name: string; // String!
    };
    channelGroupExists: {
      // args
      lockerRoomID: string; // String!
      name: string; // String!
    };
    getActualEventInviteLink: {
      // args
      gameID: string; // String!
      privateChannelID: string; // String!
    };
    getAllUsersViaUsername: {
      // args
      text?: string | null; // String
    };
    getAvailableUsersForPrivateChannel: {
      // args
      channelID: string; // String!
      count?: number | null; // Int
      name?: string | null; // String
      next?: string | null; // String
    };
    getChannel: {
      // args
      id?: string | null; // String
      slug?: string | null; // String
    };
    getChannelGroup: {
      // args
      id?: string | null; // String
      slug?: string | null; // String
    };
    getChannels: {
      // args
      channelGroupID?: string | null; // String
    };
    getClub: {
      // args
      id?: string | null; // String
      slug?: string | null; // String
    };
    getDynamicEventInviteLink: {
      // args
      gameID: string; // String!
      privateChannelID: string; // String!
    };
    getFanGroup: {
      // args
      id?: string | null; // String
      slug?: string | null; // String
    };
    getGame: {
      // args
      gameID: number; // Int!
    };
    getGames: {
      // args
      count?: number | null; // Int
      leagueCodes?: string | null; // String
      next?: string | null; // String
      partnerNames?: string | null; // String
      type: string; // String!
    };
    getInHouse: {
      // args
      id?: string | null; // String
      slug?: string | null; // String
    };
    getLeague: {
      // args
      id?: string | null; // String
      slug?: string | null; // String
    };
    getLockerRoom: {
      // args
      group?: string | null; // String
      id?: string | null; // String
      slug?: string | null; // String
    };
    getMessage: {
      // args
      id: string; // String!
    };
    getMessagesByChannelSlug: {
      // args
      channelSlug: string; // String!
      count?: number | null; // Int
      cursor?: number | null; // Int
    };
    getMessagesByChannelSlugUsingCreatedAtAsCursor: {
      // args
      channelSlug: string; // String!
      count?: number | null; // Int
      cursor?: string | null; // String
      direction: string; // String!
    };
    getMessagesByChannelSlugUsingCreatedAtAsCursorFromNotification: {
      // args
      channelSlug: string; // String!
      count?: number | null; // Int
      cursor?: string | null; // String
    };
    getMessagesByChannelSlugUsingCreatedAtAsCursorV2: {
      // args
      channelSlug: string; // String!
      count?: number | null; // Int
      cursor?: string | null; // String
      direction: string; // String!
      withAdditional: boolean; // Boolean!
    };
    getNotification: {
      // args
      id: string; // String!
    };
    getNotificationWithMessages: {
      // args
      id: string; // String!
    };
    getNotifications: {
      // args
      count?: number | null; // Int
      cursor?: number | null; // Int
      isRead?: boolean | null; // Boolean
    };
    getPhotoURL: {
      // args
      isSport?: boolean | null; // Boolean
      objectID: string; // String!
      objectType: string; // String!
      type?: string | null; // String
    };
    getPhotoURLs: {
      // args
      input: NexusGenInputs['InputQueryMedia'][]; // [InputQueryMedia!]!
    };
    getSport: {
      // args
      id?: string | null; // String
      slug?: string | null; // String
    };
    getUnreadMessages: {
      // args
      lockerRoomID: string; // String!
    };
    getUser: {
      // args
      id?: string | null; // String
      slug?: string | null; // String
    };
    getUserInvite: {
      // args
      id: string; // String!
    };
    getUserRolesInLockerRoom: {
      // args
      lockerRoomID: string; // String!
    };
    getUsersByLockerRoom: {
      // args
      lockerRoomID: string; // String!
      text?: string | null; // String
    };
    getZipCode: {
      // args
      zipCode?: string | null; // String
    };
    invitedUserExists: {
      // args
      id: string; // String!
    };
    userNameExists: {
      // args
      username: string; // String!
    };
  };
  Sport: {
    FanGroupLockerRooms: {
      // args
      count?: number | null; // Int
      cursor?: number | null; // Int
    };
    LockerRooms: {
      // args
      count?: number | null; // Int
      cursor?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: IAppResolverContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>;
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
